üëâ Programa√ß√£o orientada a objetos

Origem: Wikip√©dia, a enciclop√©dia livre.

Programa√ß√£o orientada a objetos (POO, ou OOP segundo as suas siglas em ingl√™s) √© um paradigma de programa√ß√£o baseado no conceito de "objetos", que podem conter dados na forma de campos, tamb√©m conhecidos como atributos, e c√≥digos, na forma de procedimentos, tamb√©m conhecidos como m√©todos. Uma caracter√≠stica de objetos √© que um procedimento de objeto pode acessar, e geralmente modificar, os campos de dados do objeto com o qual eles est√£o associados (objetos possuem uma no√ß√£o de "this" (este) ou "self" (pr√≥prio)).

Em POO, programas de computadores s√£o projetados por meio da composi√ß√£o de objetos que interagem com outros.[1][2] H√° uma diversidade significante de linguagens de POO, mas as mais populares s√£o aquelas baseadas em classes, significando que objetos s√£o inst√¢ncias de classes, que, normalmente, tamb√©m determinam seu tipo.

Muitas das linguagens mais utilizadas s√£o multiparadigmas que suportam programa√ß√£o orientada a objetos em maior ou menor grau, tipicamente em combina√ß√£o com programa√ß√£o procedural imperativa. Linguagens orientadas a objeto significativas incluem Java, C++, C#, Python, Lua, PHP, Ruby, Perl, Object Pascal, Objective-C, Dart, Swift, Scala, Common Lisp e Smalltalk.

Caracter√≠sticas
A programa√ß√£o orientada a objetos utiliza objetos, por√©m nem todas das t√©cnicas e estruturas associadas s√£o suportadas diretamente em linguagens que afirmam suportar a POO. As caracter√≠sticas listadas abaixo s√£o, entretanto, comuns entre linguagens consideradas fortemente orientadas a classes e objetos (ou multiparadigma com suporte a POO), com exce√ß√µes not√°veis mencionadas.[3][4][5][6]

Compartilhada com linguagens predecessoras n√£o-POO
Vari√°veis que podem armazenar informa√ß√µes formatadas em um n√∫mero pequeno de tipos de dados nativos como inteiros e caracteres alfanum√©ricos. Isto pode incluir estruturas de dados como cadeia de caracteres, listas e tabelas hash que s√£o nativas ou resultado de combina√ß√£o de vari√°veis utilizando ponteiros de mem√≥ria.
Objetos e classes
Baseada em classes x baseada em prot√≥tipos
Liga√ß√£o din√¢mica/passagem de mensagens
Encapsulamento
Encapsulamento √© o mecanismo utilizado dentro da Orienta√ß√£o a Objetos para restringir o acesso externo ao comportamento interno de um objeto . As entradas, os processamentos e as sa√≠das de um objeto n√£o influenciam os dos outros, pois os seus relacionamentos s√£o apenas referenciados.

Composi√ß√£o, heran√ßa e delega√ß√£o
Objetos podem conter outros objetos em suas vari√°veis de inst√¢ncia. Isto √© conhecido como composi√ß√£o de objetos. Por exemplo, um objeto na classe Empregado pode conter (apontar para) um objeto na classe Endere√ßo, al√©m de suas pr√≥prias vari√°veis de inst√¢ncia como "primeiro_nome" e "cargo". A composi√ß√£o de objetos √© usada para representar relacionamentos "possui-um": cada empregado possui um endere√ßo, desta forma cada objeto Empregado possui um lugar para armazenar um objeto Endere√ßo.

Linguagens que suportam classes quase sempre suportam heran√ßa. Isto permite que classes sejam organizadas em uma hierarquia que representa relacionamentos "√©-um-tipo-de". Por exemplo, a classe Empregado pode herdar da classe Pessoa. Todos os dados e m√©todos dispon√≠veis √† classe pai tamb√©m aparecer√£o na classe filha com os mesmos nomes. Por exemplo, a classe Pessoa pode definir vari√°veis "primeiro_nome" e "√∫ltimo_nome" com o m√©todo "fazer_nome_completo()". Elas tamb√©m estar√£o dispon√≠veis na classe Empregado, que pode adicionar as vari√°veis "posi√ß√£o" e "sal√°rio". Esta t√©cnica permite reutiliza√ß√£o f√°cil dos mesmos procedimentos e defini√ß√µes de dados, al√©m de potencialmente espelhar relacionamentos do mundo real de uma forma intuitiva. Em vez de utilizar tabelas de banco de dados e sub-rotinas de programa√ß√£o, o desenvolvedor utiliza objetos que o usu√°rio pode estar mais familiarizado: objetos de seu dom√≠nio de aplica√ß√£o.[7]

Subclasses podem sobrescrever os m√©todos definidos por superclasses. Heran√ßa m√∫ltipla √© permitida em algumas linguagens, apesar disto poder complicar a resolu√ß√£o de sobrescri√ß√µes. Algumas linguagens possuem suporte especial para mixin, assim como em qualquer linguagem com heran√ßa m√∫ltipla, uma mesclagem √© simplesmente uma classe que n√£o representa um relacionamento √©-um-tipo-de. Mixins s√£o normalmente utilizadas para adicionar os mesmos m√©todos para v√°rias classes. Por exemplo, MesclagemConvers√£oUnicode pode fornecer um m√©todo unicode_para_ascii() quando inclu√≠do na classe LeitorDeArquivo e na classe FragmentadorDeP√°ginaWeb, que n√£o compartilham um pai comum.

Classes abstratas n√£o podem ser instanciadas em objetos, elas existem apenas para o prop√≥sito de heran√ßa em outras classes "concretas" que podem ser instanciadas. Em Java, a palavra-chave final pode ser usada para prevenir uma classe de ser "subclasseada".

Polimorfismo
O principal conceito de polimorfismo √© a propriedade de duas ou mais classes derivadas de uma mesma superclasse responderem a mesma mensagem, cada uma de uma forma diferente.

Sub-Tipagem
Sub-tipagem √© quando o c√≥digo de chamada pode ser agn√≥stico quanto a se um objeto pertence a uma classe pai ou a um de seus descendentes.

Hist√≥ria
O seu uso popularizou-se em princ√≠pios da d√©cada de 1990. Na atualidade, existe uma grande variedade de linguagens de programa√ß√£o que suportam a orienta√ß√£o a objetos.

Os conceitos da POO t√™m origem na Simula 67, uma linguagem desenhada para fazer simula√ß√µes, criado por Ole-Johan Dahl e Kristen Nygaard, do Centro de Computa√ß√£o Noruegu√™s em Oslo. Neste centro trabalhava-se em simula√ß√µes de naves, que foram confundidas pela explos√£o combinat√≥ria de como as diversas qualidades de diferentes naves podiam afetar umas √†s outras. A ideia surgiu ao agrupar os diversos tipos de naves em diversas classes de objetos, sendo respons√°vel cada classe de objetos por definir os seus "pr√≥prios" dados e comportamentos. Foram refinados mais tarde em Smalltalk, desenvolvido em Simula em Xerox PARC (cuja primeira vers√£o foi escrita sobre Basic) mas desenhado para ser um sistema completamente din√¢mico no qual os objetos se podiam criar e modificar "durante a caminhada" (em tempo de execu√ß√£o) em vez de ter um sistema baseado em programas est√°ticos.

A POO foi-se convertendo no estilo de programa√ß√£o dominante em meados dos anos 1990, em grande parte devido √† influ√™ncia de C++, uma extens√£o da linguagem de programa√ß√£o C. A sua domina√ß√£o foi consolidada gra√ßas ao auge das interfaces gr√°ficas de utilizador, para as quais a POO est√° particularmente bem adaptada. Neste caso, fala-se tamb√©m de programa√ß√£o dirigida por eventos.

As caracter√≠sticas de orienta√ß√£o a objetos foram agregadas a muitas linguagens existentes durante esse tempo, incluindo Ada, BASIC, Lisp mais Pascal, entre outros. A adi√ß√£o destas caracter√≠sticas √†s linguagens que n√£o foram desenhadas inicialmente para elas conduziu muitas vezes a problemas de compatibilidade e na capacidade de manuten√ß√£o do c√≥digo. As linguagens orientadas a objetos "puros", por seu lado, careciam das carater√≠sticas das quais muitos programadores haviam vindo a depender. Para saltar este obst√°culo, fizeram-se muitas tentativas para criar novas linguagens baseadas em m√©todos orientados a objetos, mas permitindo algumas caracter√≠sticas imperativas de maneiras "seguras". A linguagem de programa√ß√£o Eiffel de Bertrand Meyer foi uma prematura e moderadamente acertada linguagem com esses objetivos, mas agora foi essencialmente substitu√≠da por Java, em grande parte devido √† apari√ß√£o da Internet e √† implementa√ß√£o da m√°quina virtual Java na maioria dos navegadores web. PHP na sua vers√£o 5 foi modificado; suporta uma orienta√ß√£o completa a objetos, cumprindo todas as caracter√≠sticas pr√≥prias da orienta√ß√£o a objetos.

Resumo
A POO √© um paradigma surgido nos anos 1970, que utiliza objetos como elementos fundamentais na constru√ß√£o da solu√ß√£o. Um objeto √© uma abstra√ß√£o de algum fato ou ente do mundo real, com atributos que representam as suas carater√≠sticas ou propriedades, e m√©todos que emulam o seu comportamento ou atividade. Todas as propriedades e m√©todos comuns aos objetos encapsulam-se ou agrupam-se em classes. Uma classe √© um modelo, um prot√≥tipo para criar objetos; no geral, diz-se que cada objeto √© uma inst√¢ncia ou exemplar de uma classe.

Ver tamb√©m
Base de dados orientada a objetos
Engenharia de software baseada em componentes
Refer√™ncias
 Kindler, E.; Krivy, I. (2011). ¬´Object-Oriented Simulation of systems with sophisticated control¬ª. International Journal of General Systems: 313‚Äì343
 Lewis, John; Loftus, William (2008). Java Software Solutions Foundations of Programming Design 6th ed. [S.l.]: Pearson Education Inc. ISBN 0-321-53205-8, section 1.6 "Object-Oriented Programming"
 Deborah J. Armstrong. The Quarks of Object-Oriented Development. A survey of nearly 40 years of computing literature which identified a number of fundamental concepts found in the large majority of definitions of OOP, in descending order of popularity: Inheritance, Object, Class, Encapsulation, Method, Message Passing, Polymorphism, and Abstraction.
 John C. Mitchell, Concepts in programming languages, Cambridge University Press, 2003, ISBN 0-521-78098-5, p.278. Lists: Dynamic dispatch, abstraction, subtype polymorphism, and inheritance.
 Michael Lee Scott, Programming language pragmatics, Edition 2, Morgan Kaufmann, 2006, ISBN 0-12-633951-1, p. 470. Lists encapsulation, inheritance, and dynamic dispatch.
 Pierce, Benjamin (2002). Types and Programming Languages. [S.l.]: MIT Press. ISBN 0-262-16209-1, section 18.1 "What is Object-Oriented Programming?" Lists: Dynamic dispatch, encapsulation or multi-methods (multiple dispatch), subtype polymorphism, inheritance or delegation, open recursion ("this"/"self")
 Jacobsen, Ivar; Magnus Christerson; Patrik Jonsson; Gunnar Overgaard (1992). Object Oriented Software Engineering. [S.l.]: Addison-Wesley ACM Press. pp. 43‚Äì69. ISBN 0-201-54435-0
Liga√ß√µes externas
Que √© a programa√ß√£o orientada a objetos
POO: O que √© programa√ß√£o orientada a objetos?
Controle de autoridade	
Wd: Q79872BNCF: 57290BNE: XX537453BNF: 12115131kBRE: 3958439EBID: IDFAST: 1042804GND: 4233947-9JSTOR: object-oriented-programmingLCCN: sh87007503NDL: 00937980PSH: 12473
Categorias: Programa√ß√£o orientada a objetosParadigmas de programa√ß√£o